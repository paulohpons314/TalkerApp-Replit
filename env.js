// Configura√ß√£o de ambiente - substitui placeholders com valores reais
console.log('üîß Carregando configura√ß√£o de ambiente...');

window.ENV = window.ENV || {};

// Injetar API key real se dispon√≠vel (gerado via server-side)
(async () => {
    try {
        console.log('üîß Iniciando busca de API key...');
        
        // M√©todo 1: Verificar se j√° temos chave v√°lida
        if (window.ENV.OPENAI_API_KEY && window.ENV.OPENAI_API_KEY !== '${OPENAI_API_KEY}') {
            console.log('üîë API Key j√° carregada:', window.ENV.OPENAI_API_KEY.substring(0, 8) + '...');
            return;
        }
        
        // M√©todo 2: Buscar via endpoint interno
        console.log('üîß Tentando buscar via /env.txt...');
        try {
            const response = await fetch('/env.txt');
            console.log('üîß Response status:', response.status);
            if (response.ok) {
                const key = await response.text();
                console.log('üîß Key recebida:', key ? key.substring(0, 8) + '...' : 'null');
                if (key && key.trim().startsWith('sk-')) {
                    window.ENV.OPENAI_API_KEY = key.trim();
                    console.log('‚úÖ API Key carregada via env.txt:', key.substring(0, 8) + '...');
                    return;
                }
            }
        } catch (e) {
            console.error('‚ùå Erro ao buscar env.txt:', e);
        }
        
        // M√©todo 3: Mock para desenvolvimento se nenhuma chave dispon√≠vel
        console.log('‚ö†Ô∏è API key n√£o encontrada - usando modo DEMO');
        window.ENV.OPENAI_API_KEY = null;
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar configura√ß√£o:', error);
        window.ENV.OPENAI_API_KEY = null;
    }
})();

console.log('üîß env.js carregado');